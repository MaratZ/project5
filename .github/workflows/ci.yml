name: CourseWork_9

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        sudo service postgresql start
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'rest_user_password';"
        sudo -u postgres psql -c "CREATE DATABASE restdatabase;"
        sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD 'rest_user_password';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE restdatabase TO runner;"
        sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"
        echo "DATABASE_URL=postgres://runner:rest_user_password@localhost/restdatabase" >> $GITHUB_ENV

    - name: Run migrate
      run: |
        export SECRET_KEY="${{ secrets.SECRET_KEY }}"
        python manage.py migrate

    - name: Run tests
      run: |
        export SECRET_KEY="${{ secrets.SECRET_KEY }}"
        python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_DEBUG }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_NAME }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_USER }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.BOT_TOKEN }}" >> .env          

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker compose build

      - name: Push Docker image in Docker Hub
        run: docker compose push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -v -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd
          sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} CourseWork_8
          rm -rf CourseWork_8/
          git clone git@github.com:Vitaliy-Avdoshkin/CourseWork_8.git
          cd CourseWork_8
          git fetch --all
          git switch feature/cw_9 
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_DEBUG }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_NAME }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_USER }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "SECRET_KEY=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.BOT_TOKEN }}" >> .env
          
          docker-compose down          
          docker system prune -af 
          docker image prune -af
          docker volume prune -af
          
          sudo kill -9 $(sudo lsof -t -i :80)
          sudo kill -9 $(sudo lsof -t -i :8080)
          
          docker-compose pull
          docker-compose up -d --remove-orphans
          EOF