services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    ports:
      - "8888:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    networks:
      - habits_network

  db:
    container_name: postgres
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: "POSTGRES_PASSWORD"
      POSTGRES_DB: "POSTGRES_DB"
      POSTRES_PORT: "POSTGRES_PORT"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - habits_network
    healthcheck:
      test: [ "CMD-SHELL", "-c", "pg_isready -U POSTGRES_USER -d POSTGRES_DB" ]
      interval: 30s
      retries: 5
      timeout: 10s

  web:
    container_name: app
    build: .
    tty: true
    command: sh -c "python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    expose:
      - '8000'
    env_file:
      - .env
    networks:
      - habits_network

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - ./.env
    networks:
      - habits_network

  celery:
    container_name: celery
    build: .
    tty: true
    command: celery -A config worker --loglevel=info
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    env_file:
      - .env
    networks:
      - habits_network

  celery_beat:
    container_name: celery_beat
    build: .
    tty: true
    command: celery -A config beat --loglevel=info
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: "POSTGRES_PASSWORD"
      POSTGRES_DB: "POSTGRES_DB"
      POSTRES_USER: "POSTRES_USER"
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    env_file:
      - .env
    networks:
      - habits_network

networks:
  habits_network:


volumes:
  postgres_data:
  static_volume:
  redis_data: